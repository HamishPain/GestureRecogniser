__author__ = 'Finch ThinkPad'

from binaryString import *
from hooplaDataParser import *
from timer import timeDelta
from random import choice, random, seed, shuffle
from drawer import *

#Best 6 neurons
bestLastGen = "010000111111111111111111111011110000000000000000010111000101001111110011011111110001010110111010001011111111111111111111111111110000000000000000111000111101010011100001110010000010001011011000110001111111111101111011111111110000000100000000101111001101111001011100000100100001110011110000110010000101001101011111011100111010000010100000110100010001010111010001110101000000010011111111011100000000010000000100000110001111111011101100100001111000000111111000010010110010101100000001111000000001100000000000000000001111101011111110111000111100100100011001011010100000110100001011"
bestLastGen
bestLastGen = "010000111111111111111111111011110000000000000000010100000101001111110011011010110001010011011110001011111111111111111111111111110000000000001000010000111111111111100001110010000011111011111010110001111111111111111111011011110000000000000000101110101101111001011110000100100000100111100010110010000101011101011111011100111010000010100000110100010000010101110001010100000101010011101111010100000000010000000100000111001110111111111100111001110000110111111000010010000010101100000001111001000000100000000100000000001111110011111110111000111110101100011111011110000001110000001011"
bestLastGen
bestLastGen
bestLastGen
bestLastGen
bestLastGen
#best 9 neurons?
bestLastGen = "001000111001001101011111111111111011010000000000101000111001001101111001110110100000010011110001001111111111111110101111100011110011110000100111110011110110111111010000100110000000010000100101101100110101111110111011101000110011001001111100101101100101100000111011011010101000000010100001111101110111111011010111110110111101000101100010010110101001000011100001111010100010010011110110000000010000111111011111111001110001101001110110100110111010011000101110111011110111101101101110100110001100010010100000101100100100101111001010110011100101010000110000101001110000011100000001"
bestLastGen

bestLastGen = None

visual = visualiser(LENGTH_OF_NEURON)

num_generations = 500
num_mutants = 100
rank_selection = int(num_mutants*0.3)
best_unchanged = 3
mutation_rate = 0.01
chanceOfCrossBreed = 0.3
chanceOfCompleteRandom = 0.05
min_samples_per_generation = 40
hoop_cycle_list_index = 4

def chooseDataSubset(signals):
    chosen_data = int(random()*len(signals))
    data_set = signals[chosen_data]
    length = len(data_set)
    if length < min_samples_per_generation:
        print("Not enough data!")
    index1, index2 = (int(random()*length), int(random()*length))
    while abs(index2-index1) < min_samples_per_generation:
        index1, index2 = (int(random()*length), int(random()*length))

    if index1 > index2:
        index1, index2 = (index2, index1)

    data_subset = data_set[index1:index2]
    return data_subset, chosen_data, index1, index2

seed(datetime.microsecond)

signalList = getSignalList()

a = timeDelta()
d = timeDelta()

if bestLastGen != None:
    parentDNA = BinaryStringDna(bestLastGen)
    mutantList = [parentDNA for x in range(num_mutants)]
else:
    mutantList = [BinaryStringDna() for x in range(num_mutants)]
data_subset, chosen_data, index1, index2 = chooseDataSubset(signalList)

def evalGeneration():
    #Choose a random set of data to evaluate the things on
    data_subset, chosen_data, index1, index2 = chooseDataSubset(signalList)

    #Convert the hoop trigger data to an accumulated value
    count = 0
    for i in range(len(data_subset)):
        if data_subset[i][hoop_cycle_list_index] == 1:
            count += 1
        #data_subset[i][hoop_cycle_list_index] = count*1500
        data_subset[i][hoop_cycle_list_index] = data_subset[i][hoop_cycle_list_index]*30000

    #Create a generation of mutants
    for i in xrange(rank_selection, num_mutants):
        mutantList[i] = choice(mutantList[:rank_selection])

    for i in xrange(best_unchanged, num_mutants):
        mutant = mutantList[i].getFlipMutant(mutation_rate)
        if random() < chanceOfCrossBreed:
            mutant = mutant.getCrossBreed(choice(mutantList), int(random()*LENGTH_OF_NEURON))
        if random() < chanceOfCompleteRandom:
            mutant = BinaryStringDna()
        mutantList[i] = mutant

    bestScore = 1
    for i in xrange(num_mutants):
        score = evaluateDNA(mutantList[i], data_subset)
        if score < bestScore:
            bestScore = score
        #print(score)
        mutantList[i].score = score

    mutantList = sorted(mutantList, key=lambda mutant: mutant.score)

for generation in xrange(num_generations): #Generations

    #Choose a random set of data to evaluate the things on
    data_subset, chosen_data, index1, index2 = chooseDataSubset(signalList)

    #Convert the hoop trigger data to an accumulated value
    count = 0
    for i in range(len(data_subset)):
        if data_subset[i][hoop_cycle_list_index] == 1:
            count += 1
        #data_subset[i][hoop_cycle_list_index] = count*1500
        data_subset[i][hoop_cycle_list_index] = data_subset[i][hoop_cycle_list_index]*30000

    #Create a generation of mutants
    for i in xrange(rank_selection, num_mutants):
        mutantList[i] = choice(mutantList[:rank_selection])

    #for i in xrange(best_unchanged, num_mutants):
    for i in xrange(num_mutants):
        mutant = mutantList[i].getFlipMutant(mutation_rate)
        if random() < chanceOfCrossBreed:
            mutant = mutant.getCrossBreed(choice(mutantList), int(random()*LENGTH_OF_NEURON))
        if random() < chanceOfCompleteRandom:
            mutant = BinaryStringDna()
        mutantList[i] = mutant

    try:
        priorBest
    except:
        priorBest = 0
    bestScore = 1
    for i in xrange(num_mutants):
        score = evaluateDNA(mutantList[i], data_subset)
        if score < bestScore:
            bestScore = score
        #print(score)
        mutantList[i].score = score

    mutantList = sorted(mutantList, key=lambda mutant: mutant.score)
    logString = "Generation: {: >6d} bestscore: {: >1.4f} choice: {: >2d} range {: >3d} - {: >4d} dataString: {}\n".format(generation, score, chosen_data, index1, index2, mutantList[0].dataString)
    print(logString)
    f = open("log.txt", 'w')
    f.write(logString)
    visual.collect_generation(mutantList[0].dataString, (int(mapTo(bestScore, 0, 0.45, 255, 50)), 0, int(mapTo(abs(priorBest-bestScore), 0, 0.1, 0, 255))))
    visual.build_visual()
    priorBest = bestScore